{
  "openapi": "3.0.0",
  "info": {
    "title": "Event Manager API",
    "description": "Documentation for Event Manager API",
    "contact": {
      "email": "e.garciadececa@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local API"
    }
  ],
  "paths": {
    "/events": {
      "post": {
        "tags": [
          "events"
        ],
        "description": "Creates an event",
        "requestBody": {
          "description": "Event to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    },
                    "event": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "events"
        ],
        "description": "Get all visible events.",
        "responses": {
          "200": {
            "description": "A list of all visible events (depending on credentials, if present).",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "events"
        ],
        "description": "Get an event by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "event": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "description": "Updates an event",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "requestBody": {
          "description": "Event to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated event.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    },
                    "event": {
                      "$ref": "#/components/schemas/Event"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "events"
        ],
        "description": "Deleted an event by id.",
        "parameters": [
          {
            "$ref": "#/components/parameters/eventId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Generic200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{eventId}/subscribe": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "description": "Subscribes the authenticated user to an event",
        "requestBody": {
          "description": "Comment to attach to the subscription",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created subscription.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    },
                    "subscription": {
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "More info about the error"
                    },
                    "subscription": {
                      "description": "Preexisting subscription (if present)",
                      "$ref": "#/components/schemas/Subscription"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/sign-up": {
      "post": {
        "tags": [
          "users"
        ],
        "description": "Registers an user",
        "requestBody": {
          "description": "Necessary data to register",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A confirmation message and a token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/sign-in": {
      "post": {
        "tags": [
          "users"
        ],
        "description": "Logs in an user",
        "requestBody": {
          "description": "Necessary data to login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A confirmation message and a token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    },
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/sign-out": {
      "post": {
        "tags": [
          "users"
        ],
        "description": "Logs out an user",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Generic200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "413": {
            "$ref": "#/components/responses/413"
          },
          "429": {
            "$ref": "#/components/responses/429"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ObjectId": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{24}$"
      },
      "Event": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectId"
              },
              "creatorId": {
                "$ref": "#/components/schemas/ObjectId"
              }
            }
          },
          {
            "$ref": "#/components/schemas/EventData"
          }
        ]
      },
      "EventData": {
        "type": "object",
        "properties": {
          "headline": {
            "type": "string",
            "minLength": 5,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "state": {
            "type": "string",
            "enum": [
              "draft",
              "private",
              "public"
            ]
          }
        }
      },
      "Subscription": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ObjectId"
              },
              "eventId": {
                "$ref": "#/components/schemas/ObjectId"
              },
              "subscriberId": {
                "$ref": "#/components/schemas/ObjectId"
              },
              "subscriptionDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SubscriptionData"
          }
        ]
      },
      "SubscriptionData": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "SignInData": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "SignUpData": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SignInData"
          }
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100
          },
          "lat": {
            "type": "number",
            "minimum": -90,
            "maximum": 90
          },
          "lon": {
            "type": "number",
            "minimum": -180,
            "maximum": 180
          }
        }
      }
    },
    "parameters": {
      "eventId": {
        "name": "eventId",
        "in": "path",
        "description": "ID of the Event to get",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectId"
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "More info about the error"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "More info about the error"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "More info about the error"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "More info about the error"
                }
              }
            }
          }
        }
      },
      "413": {
        "description": "Payload too large",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Generic error message"
                }
              }
            }
          }
        }
      },
      "429": {
        "description": "Too many requests",
        "content": {
          "text/html": {
            "schema": {
              "type": "string",
              "description": "Generic error message"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Generic error message"
                }
              }
            }
          }
        }
      },
      "Generic200": {
        "description": "Successful request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Confirmation message"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "Methods to manage user sign up, log in and log out"
    },
    {
      "name": "events",
      "description": "Methods to manage events"
    },
    {
      "name": "subscriptions",
      "description": "Methods to manage subscriptions"
    }
  ]
}